     1                                  ;Name: Christopher Sidell
     2                                  ;Date: 9/21/2014
     3                                  ;Section: 01
     4                                  ; Project3
     5                                  ; this project deals with ids and names, allows to modify after submission of 5
     6                                  
     7                                  ; Proceedures:
     8                                  ; 		GetID - Line 172 - retrieves ID from user input, puts in Buff 
     9                                  ;	 	GetName - Line 184 - retrieves name from the user input, puts in Buff
    10                                  ; 		NewLine - Linx 144 - prints new line to the screen
    11                                  ; 		ClearBuffer - Line 150 - clears entire buffer for new input
    12                                  ;		ValidID - Line 195 - determines if entry is valid and modifies all registers (bx is return)
    13                                  ; Macros:
    14                                  ; 		get_input(location, amount) - line 93 - gets input from stdin
    15                                  ; 		print_out(location,amount) - Line 107 -prints out to stdout
    16                                  ; 		store_registers - line 75 - stores primary 4 registers
    17                                  ; 		restore_registers - line 84 - restores primary 4 registers
    18                                  
    19                                  [SECTION .data]
    20 00000000 506C6561736520656E-     	PromptMsg: db "Please enter the id: " ; Prompt
    21 00000009 746572207468652069-
    22 00000012 643A20             
    23                                  	PromptLen: equ $-PromptMsg 	;Length of prompt
    24                                  
    25 00000015 456E74657220746865-     	PrompMessage: db "Enter the name: " ;Printed PrompMessage
    26 0000001E 206E616D653A20     
    27                                  	PrompMessageLen: equ $-PrompMessage 		;length of printed message
    28                                  
    29 00000025 0A496E76616C696420-     	InvalidId: db 10,"Invalid id ",10 ;Printed InvalidId
    30 0000002E 6964200A           
    31                                  	InvalidIdLen: equ $-InvalidId 		;length of printed message
    32                                  
    33 00000032 546865206E616D6520-     	NameWas: db "The name was: ", ;Printed NameWas
    34 0000003B 7761733A20         
    35                                  	NameWasLen: equ $-NameWas 		;length of printed message
    36                                  
    37 00000040 456E74657220746865-     	NewName: db "Enter the new name: " ;Printed NewName
    38 00000049 206E6577206E616D65-
    39 00000052 3A20               
    40                                  	NewNameLen: equ $-NewName 		;length of printed message
    41                                  
    42 00000054 456E74657220696473-     	FinalPrompt: db "Enter ids of names to change (00 to stop)",10 ;Printed FinalPrompt
    43 0000005D 206F66206E616D6573-
    44 00000066 20746F206368616E67-
    45 0000006F 652028303020746F20-
    46 00000078 73746F70290A       
    47                                  	FinalPromptLen: equ $-FinalPrompt 		;length of printed message
    48                                  
    49 0000007E 49443A20                	ID: db "ID: "				; 'id:'
    50                                  	IDLen: equ $-ID 			; length of prompt
    51                                  
    52 00000082 4E414D453A20            	NAME: db "NAME: "				; 'NAME:'
    53                                  	NAMELen: equ $-NAME 			; length of prompt
    54                                  
    55 00000088 0A                      	NewLineMsg: db 10 			; new line
    56                                  	NewLineLen: equ $-NewLineMsg ; new line length
    57                                  
    58                                  	DigitLength equ 2 			; max length of ID
    59                                  	DigitLenIn equ 3 			; max length of ID input
    60                                  	NameLength equ 9 			; max length of names
    61                                  	NameLenIn equ 10 			; max length of names input
    62                                  [SECTION .bss]
    63                                  
    64                                  	BUFFLEN equ 10 				; max length of buffer
    65 00000000 <res 0000000A>          	Buff resb BUFFLEN 			; allocate 10 bytes for input
    66                                  
    67 0000000A <res 00000001>          	Iteration resb 1 			; Iteration byte for whole program
    68 0000000B <res 00000001>          	Match resb 1 				; ValidID Match case
    69                                  
    70 0000000C <res 00000002>          	FirstID resb 2 				; first ID
    71 0000000E <res 0000000A>          	FirstName resb 10 			; first name
    72 00000018 <res 00000002>          	SecondID resb 2 			; second ID
    73 0000001A <res 0000000A>          	SecondName resb 10 			; second name
    74 00000024 <res 00000002>          	ThirdID resb 2 				; third ID
    75 00000026 <res 0000000A>          	ThirdName resb 10 			; third name
    76 00000030 <res 00000002>          	FourthID resb 2 			; fourth ID
    77 00000032 <res 0000000A>          	FourthName resb 10 			; fourth name
    78 0000003C <res 00000002>          	FifthID resb 2 				; fifth ID
    79 0000003E <res 0000000A>          	FifthName resb 10 			; fifth name
    80                                  
    81                                  [SECTION .text]
    82                                  
    83                                  global _start                   ; make start global so ld can find it
    84                                  
    85                                  ;store_registers
    86                                  ; store primary registers on stack
    87                                  %macro store_registers 0 		; define macro
    88                                  	push eax 					; store eax on stack
    89                                  	push ebx 					; store ebx on stack
    90                                  	push ecx 					; store ecx on stack
    91                                  	push edx 					; store edx on stack
    92                                  %endmacro 						; end macro
    93                                  
    94                                  ;restore_registers
    95                                  ; restore primary registers from
    96                                  %macro restore_registers 0 		; define macro
    97                                  	pop edx 					; take edx from stack
    98                                  	pop ecx 					; take ecx from stack
    99                                  	pop ebx 					; take ebx from stack
   100                                  	pop eax 					; take eax from stack
   101                                  %endmacro 						; end macro
   102                                  
   103                                  ;get_input
   104                                  ;modifies primary 4 registers 
   105                                  %macro get_input 2 				;define macro with 2 inputs
   106                                  	store_registers 			; KEEP ALL THE REGISTERS
   107                                  
   108                                  	mov eax,3					; sys_read call
   109                                  	mov ebx,0 					; File descriptor 0: stdin
   110                                  	mov ecx,%1 					; From parameter, how much to read in
   111                                  	mov edx,%2					; from parameter, where to read to
   112                                  	int 80H 					; kernel interrupt
   113                                  
   114                                  	restore_registers 			; RESTORE THEM
   115                                  %endmacro 						;end macro
   116                                  
   117                                  ;print_out
   118                                  ;modifies primary 4 registers 
   119                                  %macro print_out 2 				;define macro with 2 inputs
   120                                  	store_registers 			; KEEP ALL THE REGISTERS
   121                                  
   122                                  	mov eax,4					; sys_write call
   123                                  	mov ebx,1 					; file descriptor 1, stdout
   124                                  	mov ecx,%1 					; characters to write 
   125                                  	mov edx,%2					; pass number of chars to write
   126                                  	int 80h 					; kernel interrupt
   127                                  
   128                                  	restore_registers 			; RESTORE THEM
   129                                  %endmacro 						;end macro
   130                                  
   131                                  ;copy_name(pointer)
   132                                  ;copy from buffer to name pointer given
   133                                  ; requires eax to hold pointer
   134                                  CopyName: 
   135                                  	store_registers 			; KEEP ALL THE REGISTERS
   136 00000000 50                  <1>  push eax
   137 00000001 53                  <1>  push ebx
   138 00000002 51                  <1>  push ecx
   139 00000003 52                  <1>  push edx
   140                                  	
   141 00000004 B909000000              	mov ecx,NameLength 			; iterate for length of buffer
   142 00000009 BE[00000000]            	mov esi,Buff 				; pointer to buffer
   143                                  
   144                                  	.loop: 						; loop to kill buffer
   145 0000000E 8A1E                    		mov bl, byte [esi] ; kill char 
   146 00000010 8818                    		mov byte [eax], bl
   147                                  
   148 00000012 46                      		inc esi					; move to next char in Buff
   149 00000013 40                      		inc eax
   150                                  
   151 00000014 49                      		dec ecx					; ITERATE
   152 00000015 81F900000000            		cmp ecx,0 				; DID WE FINISH?!
   153 0000001B 75F1                    	jne .loop 					; If no, go back
   154                                  
   155                                  	restore_registers 			; RESTORE THEM
   156 0000001D 5A                  <1>  pop edx
   157 0000001E 59                  <1>  pop ecx
   158 0000001F 5B                  <1>  pop ebx
   159 00000020 58                  <1>  pop eax
   160 00000021 C3                      	ret
   161                                  
   162                                  ; NewLine (proceedure) 
   163                                  ; Prints a newline to the screen
   164                                  NewLine:
   165                                  		print_out NewLineMsg, NewLineLen ;print out new line
   166                              <1>  store_registers
   167 00000022 50                  <2>  push eax
   168 00000023 53                  <2>  push ebx
   169 00000024 51                  <2>  push ecx
   170 00000025 52                  <2>  push edx
   171                              <1> 
   172 00000026 B804000000          <1>  mov eax,4
   173 0000002B BB01000000          <1>  mov ebx,1
   174 00000030 B9[88000000]        <1>  mov ecx,%1
   175 00000035 BA01000000          <1>  mov edx,%2
   176 0000003A CD80                <1>  int 80h
   177                              <1> 
   178                              <1>  restore_registers
   179 0000003C 5A                  <2>  pop edx
   180 0000003D 59                  <2>  pop ecx
   181 0000003E 5B                  <2>  pop ebx
   182 0000003F 58                  <2>  pop eax
   183 00000040 C3                      		ret 					; return
   184                                  
   185                                  ;Clear buffer (proceedure)
   186                                  ;clears entire buffer for more input
   187                                  ClearBuffer:
   188                                  	store_registers 			; KEEP ALL THE REGISTERS
   189 00000041 50                  <1>  push eax
   190 00000042 53                  <1>  push ebx
   191 00000043 51                  <1>  push ecx
   192 00000044 52                  <1>  push edx
   193                                  	
   194 00000045 B90A000000              	mov ecx, BUFFLEN 			; iterate for length of buffer
   195 0000004A BE[00000000]            	mov esi,Buff 				; pointer to buffer
   196                                  
   197                                  
   198                                  	.loop: 						; loop to kill buffer
   199 0000004F C60600                  		mov byte [esi],0 		; kill char 
   200 00000052 46                      		inc esi					; move to next char in Buff
   201                                  
   202 00000053 49                      		dec ecx					;ITERATE
   203 00000054 81F900000000            		cmp ecx,0 				;DID WE FINISH?!
   204 0000005A 75F3                    	jne .loop 					;If no, go back
   205                                  
   206                                  	restore_registers 			; RESTORE THEM
   207 0000005C 5A                  <1>  pop edx
   208 0000005D 59                  <1>  pop ecx
   209 0000005E 5B                  <1>  pop ebx
   210 0000005F 58                  <1>  pop eax
   211                                  
   212 00000060 C3                      	ret
   213                                  
   214                                  ; GetID
   215                                  ; modifies EAX with the two numbers that the user inputs
   216                                  ; Retrieves the ID
   217                                  GetID:
   218 00000061 E8DBFFFFFF              	call ClearBuffer 			; clear entire buffer
   219                                  
   220                                  	print_out PromptMsg, PromptLen ; print out message
   221                              <1>  store_registers
   222 00000066 50                  <2>  push eax
   223 00000067 53                  <2>  push ebx
   224 00000068 51                  <2>  push ecx
   225 00000069 52                  <2>  push edx
   226                              <1> 
   227 0000006A B804000000          <1>  mov eax,4
   228 0000006F BB01000000          <1>  mov ebx,1
   229 00000074 B9[00000000]        <1>  mov ecx,%1
   230 00000079 BA15000000          <1>  mov edx,%2
   231 0000007E CD80                <1>  int 80h
   232                              <1> 
   233                              <1>  restore_registers
   234 00000080 5A                  <2>  pop edx
   235 00000081 59                  <2>  pop ecx
   236 00000082 5B                  <2>  pop ebx
   237 00000083 58                  <2>  pop eax
   238                                  
   239                                  	get_input Buff,DigitLenIn 	; get id and put it in register given
   240                              <1>  store_registers
   241 00000084 50                  <2>  push eax
   242 00000085 53                  <2>  push ebx
   243 00000086 51                  <2>  push ecx
   244 00000087 52                  <2>  push edx
   245                              <1> 
   246 00000088 B803000000          <1>  mov eax,3
   247 0000008D BB00000000          <1>  mov ebx,0
   248 00000092 B9[00000000]        <1>  mov ecx,%1
   249 00000097 BA03000000          <1>  mov edx,%2
   250 0000009C CD80                <1>  int 80H
   251                              <1> 
   252                              <1>  restore_registers
   253 0000009E 5A                  <2>  pop edx
   254 0000009F 59                  <2>  pop ecx
   255 000000A0 5B                  <2>  pop ebx
   256 000000A1 58                  <2>  pop eax
   257                                  
   258 000000A2 C3                      	ret 						; return
   259                                  
   260                                  ; GetName
   261                                  ; modifies EAX with the two numbers that the user inputs
   262                                  ; Retrieves the ID
   263                                  GetName:
   264 000000A3 E899FFFFFF              	call ClearBuffer 			; clear entire buffer
   265                                  
   266                                  	print_out PrompMessage, PrompMessageLen ; print out message
   267                              <1>  store_registers
   268 000000A8 50                  <2>  push eax
   269 000000A9 53                  <2>  push ebx
   270 000000AA 51                  <2>  push ecx
   271 000000AB 52                  <2>  push edx
   272                              <1> 
   273 000000AC B804000000          <1>  mov eax,4
   274 000000B1 BB01000000          <1>  mov ebx,1
   275 000000B6 B9[15000000]        <1>  mov ecx,%1
   276 000000BB BA10000000          <1>  mov edx,%2
   277 000000C0 CD80                <1>  int 80h
   278                              <1> 
   279                              <1>  restore_registers
   280 000000C2 5A                  <2>  pop edx
   281 000000C3 59                  <2>  pop ecx
   282 000000C4 5B                  <2>  pop ebx
   283 000000C5 58                  <2>  pop eax
   284                                  
   285                                  	get_input Buff,NameLenIn 	 ; get id and put it in register given
   286                              <1>  store_registers
   287 000000C6 50                  <2>  push eax
   288 000000C7 53                  <2>  push ebx
   289 000000C8 51                  <2>  push ecx
   290 000000C9 52                  <2>  push edx
   291                              <1> 
   292 000000CA B803000000          <1>  mov eax,3
   293 000000CF BB00000000          <1>  mov ebx,0
   294 000000D4 B9[00000000]        <1>  mov ecx,%1
   295 000000D9 BA0A000000          <1>  mov edx,%2
   296 000000DE CD80                <1>  int 80H
   297                              <1> 
   298                              <1>  restore_registers
   299 000000E0 5A                  <2>  pop edx
   300 000000E1 59                  <2>  pop ecx
   301 000000E2 5B                  <2>  pop ebx
   302 000000E3 58                  <2>  pop eax
   303                                  	
   304 000000E4 C3                      	ret 						; return
   305                                  
   306                                  ;ValidID
   307                                  ; Modifies ax and bx, returns boolean in bx
   308                                  ValidID:
   309 000000E5 6631DB                  	xor bx,bx 					;clear bx
   310                                  	
   311 000000E8 C605[0B000000]01        	mov byte [Match],1 				;match 1
   312 000000EF 668B1D[0C000000]        	mov bx,[FirstID] 			;get input for id
   313 000000F6 6639C3                  	cmp bx,ax 					; compare equivalence
   314 000000F9 745F                    	je .false 					; if equal, it's invalid
   315                                  
   316 000000FB C605[0B000000]02        	mov byte [Match],2 				;match 2
   317 00000102 668B1D[18000000]        	mov bx,[SecondID] 			;get input for id
   318 00000109 6639C3                  	cmp bx,ax 					; compare equivalence
   319 0000010C 744C                    	je .false 					; if equal, it's invalid
   320                                  
   321 0000010E C605[0B000000]03        	mov byte [Match],3 				;match 3
   322 00000115 668B1D[24000000]        	mov bx,[ThirdID]			;get input for id
   323 0000011C 6639C3                  	cmp bx,ax 					; compare equivalence
   324 0000011F 7439                    	je .false 					; if equal, it's invalid
   325                                  
   326 00000121 C605[0B000000]04        	mov byte [Match],4 				;match 4
   327 00000128 668B1D[30000000]        	mov bx,[FourthID]			;get input for id
   328 0000012F 6639C3                  	cmp bx,ax 					; compare equivalence
   329 00000132 7426                    	je .false 					; if equal, it's invalid
   330                                  
   331 00000134 C605[0B000000]05        	mov byte [Match],5 				;match 5
   332 0000013B 668B1D[3C000000]        	mov bx,[FifthID]			;get input for id
   333 00000142 6639C3                  	cmp bx,ax 					; compare equivalence
   334 00000145 7413                    	je .false 					; if equal, it's invalid
   335                                  
   336 00000147 C605[0B000000]00        	mov byte [Match],0 				;match 0
   337                                  	.true:
   338 0000014E 6631DB                  		xor bx,bx 				;clear bx for good measure
   339 00000151 66BB0100                		mov bx,1h 				; set it to 'true'
   340 00000155 E903000000              		jmp .skip 				; skip false
   341                                  	.false:
   342 0000015A 6631DB                  		xor bx,bx 				; clear bx 'false'
   343                                  
   344                                  	.skip:
   345 0000015D C3                      	ret 						;'return'
   346                                  
   347                                  _start:                         ; the program actually starts here
   348 0000015E 90                      		nop 					;gdb requirement
   349                                  
   350 0000015F C605[0A000000]00        		mov byte [Iteration],0 	; zero out iteration
   351                                  
   352                                  GettingInput:
   353 00000166 FE05[0A000000]          		inc byte [Iteration] 	; increment iterator
   354                                  
   355                                  	.fst:
   356 0000016C E91E000000              		jmp .fstP				; skip invalid message printing
   357                                  	.fstR:
   358                                  		print_out InvalidId, InvalidIdLen ;print invalid message
   359                              <1>  store_registers
   360 00000171 50                  <2>  push eax
   361 00000172 53                  <2>  push ebx
   362 00000173 51                  <2>  push ecx
   363 00000174 52                  <2>  push edx
   364                              <1> 
   365 00000175 B804000000          <1>  mov eax,4
   366 0000017A BB01000000          <1>  mov ebx,1
   367 0000017F B9[25000000]        <1>  mov ecx,%1
   368 00000184 BA0D000000          <1>  mov edx,%2
   369 00000189 CD80                <1>  int 80h
   370                              <1> 
   371                              <1>  restore_registers
   372 0000018B 5A                  <2>  pop edx
   373 0000018C 59                  <2>  pop ecx
   374 0000018D 5B                  <2>  pop ebx
   375 0000018E 58                  <2>  pop eax
   376                                  	.fstP:
   377 0000018F 803D[0A000000]01        		cmp byte [Iteration],1  ;first
   378 00000196 7540                    		jne .snd 				;if not check second
   379                                  
   380 00000198 E8C4FEFFFF              		call GetID 				; get id
   381                                  
   382 0000019D 668B0D[00000000]        		mov cx, word [Buff] 	; get id out of buffer
   383                                  
   384 000001A4 6689C8                  		mov ax, cx 				; move into temporary
   385 000001A7 E839FFFFFF              		call ValidID 			; check validity
   386                                  
   387 000001AC 6681FB0000              		cmp bx,0 				; is it valid
   388 000001B1 74BE                    		je .fstR 				; warn and go back
   389                                  
   390 000001B3 66890D[0C000000]        		mov [FirstID] , cx 		; put id into holder
   391                                  
   392 000001BA E863FEFFFF              		call NewLine 			; print new line
   393                                  
   394 000001BF E8DFFEFFFF              		call GetName 			; get name
   395                                  
   396 000001C4 B8[0E000000]            		mov eax,FirstName 		; put pointer in eax
   397 000001C9 E832FEFFFF              		call CopyName 			; copy name from buffer
   398                                  
   399 000001CE E84FFEFFFF              		call NewLine 			; print new line
   400                                  
   401 000001D3 E9AB010000              		jmp .skip 				;skip rest of if statement
   402                                  	.snd: 						;second label
   403 000001D8 E91E000000              		jmp .sndP				; skip invalid message printing
   404                                  	.sndR:
   405                                  		print_out InvalidId, InvalidIdLen ;print invalid message
   406                              <1>  store_registers
   407 000001DD 50                  <2>  push eax
   408 000001DE 53                  <2>  push ebx
   409 000001DF 51                  <2>  push ecx
   410 000001E0 52                  <2>  push edx
   411                              <1> 
   412 000001E1 B804000000          <1>  mov eax,4
   413 000001E6 BB01000000          <1>  mov ebx,1
   414 000001EB B9[25000000]        <1>  mov ecx,%1
   415 000001F0 BA0D000000          <1>  mov edx,%2
   416 000001F5 CD80                <1>  int 80h
   417                              <1> 
   418                              <1>  restore_registers
   419 000001F7 5A                  <2>  pop edx
   420 000001F8 59                  <2>  pop ecx
   421 000001F9 5B                  <2>  pop ebx
   422 000001FA 58                  <2>  pop eax
   423                                  	.sndP:
   424 000001FB 803D[0A000000]02        		cmp byte [Iteration],2 	;second
   425 00000202 7540                    		jne .thrd 				;if not check third
   426                                  
   427 00000204 E858FEFFFF              		call GetID 				; get id
   428                                  
   429 00000209 668B0D[00000000]        		mov cx, word [Buff] 	; get id out of buffer
   430                                  
   431 00000210 6689C8                  		mov ax, cx 				; move into temporary
   432 00000213 E8CDFEFFFF              		call ValidID 			; check validity
   433                                  
   434 00000218 6681FB0000              		cmp bx,0 				; is it valid
   435 0000021D 74BE                    		je .sndR 				; warn and go back
   436                                  
   437 0000021F 66890D[18000000]        		mov [SecondID], cx 		; put id into holder
   438                                  
   439 00000226 E8F7FDFFFF              		call NewLine 			; print new line
   440                                  
   441 0000022B E873FEFFFF              		call GetName 			; get name
   442                                  
   443 00000230 B8[1A000000]            		mov eax,SecondName 		; put pointer in eax
   444 00000235 E8C6FDFFFF              		call CopyName 			; copy name from buffer
   445                                  
   446 0000023A E8E3FDFFFF              		call NewLine 			; print new line
   447                                  
   448 0000023F E93F010000              		jmp .skip 				;skip rest of if statement
   449                                  	.thrd: 						;third label
   450 00000244 E91E000000              		jmp .thrdP				; skip invalid message printing
   451                                  	.thrdR:
   452                                  		print_out InvalidId, InvalidIdLen ;print invalid message
   453                              <1>  store_registers
   454 00000249 50                  <2>  push eax
   455 0000024A 53                  <2>  push ebx
   456 0000024B 51                  <2>  push ecx
   457 0000024C 52                  <2>  push edx
   458                              <1> 
   459 0000024D B804000000          <1>  mov eax,4
   460 00000252 BB01000000          <1>  mov ebx,1
   461 00000257 B9[25000000]        <1>  mov ecx,%1
   462 0000025C BA0D000000          <1>  mov edx,%2
   463 00000261 CD80                <1>  int 80h
   464                              <1> 
   465                              <1>  restore_registers
   466 00000263 5A                  <2>  pop edx
   467 00000264 59                  <2>  pop ecx
   468 00000265 5B                  <2>  pop ebx
   469 00000266 58                  <2>  pop eax
   470                                  	.thrdP:
   471 00000267 803D[0A000000]03        		cmp byte [Iteration],3 	;third
   472 0000026E 7540                    		jne .frth 				; if not check fourth
   473                                  
   474 00000270 E8ECFDFFFF              		call GetID 				; get id
   475                                  
   476 00000275 668B0D[00000000]        		mov cx, word [Buff] 	; get id out of buffer
   477                                  
   478 0000027C 6689C8                  		mov ax, cx 				; move into temporary
   479 0000027F E861FEFFFF              		call ValidID 			; check validity
   480                                  
   481 00000284 6681FB0000              		cmp bx,0 				; is it valid
   482 00000289 74BE                    		je .thrdR 				; warn and go back
   483                                  
   484 0000028B 66890D[24000000]        		mov [ThirdID], cx 		; put id into holder
   485                                  
   486 00000292 E88BFDFFFF              		call NewLine 			; print new line
   487                                  
   488 00000297 E807FEFFFF              		call GetName 			; get name
   489                                  
   490 0000029C B8[26000000]            		mov eax,ThirdName 		; put pointer in eax
   491 000002A1 E85AFDFFFF              		call CopyName 			; copy name from buffer
   492                                  
   493 000002A6 E877FDFFFF              		call NewLine 			; print new line
   494                                  
   495 000002AB E9D3000000              		jmp .skip 				;skip rest of if statement
   496                                  	.frth: 						;fourth label
   497 000002B0 E91E000000              		jmp .frthP				; skip invalid message printing
   498                                  	.frthR:
   499                                  		print_out InvalidId, InvalidIdLen ;print invalid message
   500                              <1>  store_registers
   501 000002B5 50                  <2>  push eax
   502 000002B6 53                  <2>  push ebx
   503 000002B7 51                  <2>  push ecx
   504 000002B8 52                  <2>  push edx
   505                              <1> 
   506 000002B9 B804000000          <1>  mov eax,4
   507 000002BE BB01000000          <1>  mov ebx,1
   508 000002C3 B9[25000000]        <1>  mov ecx,%1
   509 000002C8 BA0D000000          <1>  mov edx,%2
   510 000002CD CD80                <1>  int 80h
   511                              <1> 
   512                              <1>  restore_registers
   513 000002CF 5A                  <2>  pop edx
   514 000002D0 59                  <2>  pop ecx
   515 000002D1 5B                  <2>  pop ebx
   516 000002D2 58                  <2>  pop eax
   517                                  	.frthP:
   518 000002D3 803D[0A000000]04        		cmp byte [Iteration],4 	;fourth
   519 000002DA 7540                    		jne .ffth 				; if not check fifth
   520                                  
   521 000002DC E880FDFFFF              		call GetID 				; get id
   522                                  
   523 000002E1 668B0D[00000000]        		mov cx, word [Buff] 	; get id out of buffer
   524                                  
   525 000002E8 6689C8                  		mov ax, cx 				; move into temporary
   526 000002EB E8F5FDFFFF              		call ValidID 			; check validity
   527                                  
   528 000002F0 6681FB0000              		cmp bx,0 				; is it valid
   529 000002F5 74BE                    		je .frthR 				; warn and go back
   530                                  
   531 000002F7 66890D[30000000]        		mov [FourthID], cx 		; put id into holder
   532                                  
   533 000002FE E81FFDFFFF              		call NewLine 			; print new line
   534                                  
   535 00000303 E89BFDFFFF              		call GetName 			; get name
   536                                  
   537 00000308 B8[32000000]            		mov eax,FourthName 		; put pointer in eax
   538 0000030D E8EEFCFFFF              		call CopyName 			; copy name from buffer
   539                                  
   540 00000312 E80BFDFFFF              		call NewLine 			; print new line
   541                                  
   542 00000317 E967000000              		jmp .skip 				;skip rest of if statement
   543                                  	.ffth: 						;fifth label
   544 0000031C E91E000000              		jmp .ffthP				; skip invalid message printing
   545                                  	.ffthR:
   546                                  		print_out InvalidId, InvalidIdLen ;print invalid message
   547                              <1>  store_registers
   548 00000321 50                  <2>  push eax
   549 00000322 53                  <2>  push ebx
   550 00000323 51                  <2>  push ecx
   551 00000324 52                  <2>  push edx
   552                              <1> 
   553 00000325 B804000000          <1>  mov eax,4
   554 0000032A BB01000000          <1>  mov ebx,1
   555 0000032F B9[25000000]        <1>  mov ecx,%1
   556 00000334 BA0D000000          <1>  mov edx,%2
   557 00000339 CD80                <1>  int 80h
   558                              <1> 
   559                              <1>  restore_registers
   560 0000033B 5A                  <2>  pop edx
   561 0000033C 59                  <2>  pop ecx
   562 0000033D 5B                  <2>  pop ebx
   563 0000033E 58                  <2>  pop eax
   564                                  	.ffthP:
   565 0000033F 803D[0A000000]05        		cmp byte [Iteration],5 	;fifth
   566 00000346 753B                    		jne .skip 				; if not skip
   567                                  
   568 00000348 E814FDFFFF              		call GetID 				; get id
   569                                  
   570 0000034D 668B0D[00000000]        		mov cx, word [Buff] 	; get id out of buffer
   571                                  
   572 00000354 6689C8                  		mov ax, cx 				; move into temporary
   573 00000357 E889FDFFFF              		call ValidID 			; check validity
   574                                  
   575 0000035C 6681FB0000              		cmp bx,0 				; is it valid
   576 00000361 74BE                    		je .ffthR 				; warn and go back
   577                                  
   578 00000363 66890D[3C000000]        		mov [FifthID], cx 		; put id into holder
   579                                  
   580 0000036A E8B3FCFFFF              		call NewLine 			; print new line
   581                                  
   582 0000036F E82FFDFFFF              		call GetName 			; get name
   583                                  
   584 00000374 B8[3E000000]            		mov eax,FifthName 		; put pointer in eax
   585 00000379 E882FCFFFF              		call CopyName 			; copy name from buffer
   586                                  
   587 0000037E E89FFCFFFF              		call NewLine 			; print new line
   588                                  
   589                                  	.skip: 						; skip label
   590 00000383 803D[0A000000]05        		cmp byte [Iteration],5 	; compare if we're done our program
   591 0000038A 7D05                    		jge ModifyingInput 		; quit the program
   592                                  
   593 0000038C E9D5FDFFFF              		jmp GettingInput 		; go back to beginning if we're not done
   594                                  		
   595                                  
   596                                  ModifyingInput:
   597                                  		print_out FinalPrompt, FinalPromptLen ;display final prompt
   598                              <1>  store_registers
   599 00000391 50                  <2>  push eax
   600 00000392 53                  <2>  push ebx
   601 00000393 51                  <2>  push ecx
   602 00000394 52                  <2>  push edx
   603                              <1> 
   604 00000395 B804000000          <1>  mov eax,4
   605 0000039A BB01000000          <1>  mov ebx,1
   606 0000039F B9[54000000]        <1>  mov ecx,%1
   607 000003A4 BA2A000000          <1>  mov edx,%2
   608 000003A9 CD80                <1>  int 80h
   609                              <1> 
   610                              <1>  restore_registers
   611 000003AB 5A                  <2>  pop edx
   612 000003AC 59                  <2>  pop ecx
   613 000003AD 5B                  <2>  pop ebx
   614 000003AE 58                  <2>  pop eax
   615                                  
   616 000003AF E86EFCFFFF              		call NewLine 			;print new line
   617                                  
   618                                  	.modify: 					; modifying logic
   619 000003B4 E91E000000              		jmp .main
   620                                  		.mainI:
   621                                  			print_out InvalidId, InvalidIdLen ;print invalid message
   622                              <1>  store_registers
   623 000003B9 50                  <2>  push eax
   624 000003BA 53                  <2>  push ebx
   625 000003BB 51                  <2>  push ecx
   626 000003BC 52                  <2>  push edx
   627                              <1> 
   628 000003BD B804000000          <1>  mov eax,4
   629 000003C2 BB01000000          <1>  mov ebx,1
   630 000003C7 B9[25000000]        <1>  mov ecx,%1
   631 000003CC BA0D000000          <1>  mov edx,%2
   632 000003D1 CD80                <1>  int 80h
   633                              <1> 
   634                              <1>  restore_registers
   635 000003D3 5A                  <2>  pop edx
   636 000003D4 59                  <2>  pop ecx
   637 000003D5 5B                  <2>  pop ebx
   638 000003D6 58                  <2>  pop eax
   639                                  		.main:
   640 000003D7 E885FCFFFF              			call GetID 				; get id
   641                                  
   642 000003DC 6631C9                  			xor cx,cx 				; clear cx
   643 000003DF 668B0D[00000000]        			mov cx, word [Buff] 	; get id out of buffer
   644                                  
   645 000003E6 6681F93030              			cmp cx,12336			; if '00'
   646 000003EB 0F8413020000            			je Exit 				; exit
   647                                  
   648 000003F1 6689C8                  			mov ax, cx 				; move into temporary
   649 000003F4 E8ECFCFFFF              			call ValidID 			; check validity
   650                                  
   651 000003F9 6681FB0000              			cmp bx,0 				; is it valid
   652 000003FE 75B9                    			jne .mainI 				; warn and go back
   653                                  
   654                                  		.first:
   655 00000400 803D[0B000000]01        			cmp byte [Match],1 		; match 1st
   656 00000407 755F                    			jne .second 			; no, go to 2nd
   657                                  
   658 00000409 E814FCFFFF              			call NewLine 			;print new line
   659                                  
   660                                  			print_out NameWas, NameWasLen ;print prompt for prev name
   661                              <1>  store_registers
   662 0000040E 50                  <2>  push eax
   663 0000040F 53                  <2>  push ebx
   664 00000410 51                  <2>  push ecx
   665 00000411 52                  <2>  push edx
   666                              <1> 
   667 00000412 B804000000          <1>  mov eax,4
   668 00000417 BB01000000          <1>  mov ebx,1
   669 0000041C B9[32000000]        <1>  mov ecx,%1
   670 00000421 BA0E000000          <1>  mov edx,%2
   671 00000426 CD80                <1>  int 80h
   672                              <1> 
   673                              <1>  restore_registers
   674 00000428 5A                  <2>  pop edx
   675 00000429 59                  <2>  pop ecx
   676 0000042A 5B                  <2>  pop ebx
   677 0000042B 58                  <2>  pop eax
   678                                  
   679                                  			print_out FirstName, NameLength ;print name 
   680                              <1>  store_registers
   681 0000042C 50                  <2>  push eax
   682 0000042D 53                  <2>  push ebx
   683 0000042E 51                  <2>  push ecx
   684 0000042F 52                  <2>  push edx
   685                              <1> 
   686 00000430 B804000000          <1>  mov eax,4
   687 00000435 BB01000000          <1>  mov ebx,1
   688 0000043A B9[0E000000]        <1>  mov ecx,%1
   689 0000043F BA09000000          <1>  mov edx,%2
   690 00000444 CD80                <1>  int 80h
   691                              <1> 
   692                              <1>  restore_registers
   693 00000446 5A                  <2>  pop edx
   694 00000447 59                  <2>  pop ecx
   695 00000448 5B                  <2>  pop ebx
   696 00000449 58                  <2>  pop eax
   697                                  
   698 0000044A E8D3FBFFFF              			call NewLine 			;print new line
   699                                  
   700 0000044F E84FFCFFFF              			call GetName 			; get name
   701                                  
   702 00000454 B8[0E000000]            			mov eax,FirstName 		; put pointer in eax
   703 00000459 E8A2FBFFFF              			call CopyName 			; copy name from buffer
   704                                  
   705 0000045E E8BFFBFFFF              			call NewLine 			;print new line
   706                                  
   707 00000463 E96FFFFFFF              			jmp .main 				; go back to modify
   708                                  		.second:
   709 00000468 803D[0B000000]02        			cmp byte [Match],2 		;match 2nd?
   710 0000046F 755F                    			jne .third 				; no, go to 3rd
   711                                  
   712 00000471 E8ACFBFFFF              			call NewLine 			;print new line
   713                                  
   714                                  			print_out NameWas, NameWasLen ;print prompt for prev name
   715                              <1>  store_registers
   716 00000476 50                  <2>  push eax
   717 00000477 53                  <2>  push ebx
   718 00000478 51                  <2>  push ecx
   719 00000479 52                  <2>  push edx
   720                              <1> 
   721 0000047A B804000000          <1>  mov eax,4
   722 0000047F BB01000000          <1>  mov ebx,1
   723 00000484 B9[32000000]        <1>  mov ecx,%1
   724 00000489 BA0E000000          <1>  mov edx,%2
   725 0000048E CD80                <1>  int 80h
   726                              <1> 
   727                              <1>  restore_registers
   728 00000490 5A                  <2>  pop edx
   729 00000491 59                  <2>  pop ecx
   730 00000492 5B                  <2>  pop ebx
   731 00000493 58                  <2>  pop eax
   732                                  
   733                                  			print_out SecondName, NameLength ;print name
   734                              <1>  store_registers
   735 00000494 50                  <2>  push eax
   736 00000495 53                  <2>  push ebx
   737 00000496 51                  <2>  push ecx
   738 00000497 52                  <2>  push edx
   739                              <1> 
   740 00000498 B804000000          <1>  mov eax,4
   741 0000049D BB01000000          <1>  mov ebx,1
   742 000004A2 B9[1A000000]        <1>  mov ecx,%1
   743 000004A7 BA09000000          <1>  mov edx,%2
   744 000004AC CD80                <1>  int 80h
   745                              <1> 
   746                              <1>  restore_registers
   747 000004AE 5A                  <2>  pop edx
   748 000004AF 59                  <2>  pop ecx
   749 000004B0 5B                  <2>  pop ebx
   750 000004B1 58                  <2>  pop eax
   751                                  
   752 000004B2 E86BFBFFFF              			call NewLine 			;print new line
   753                                  
   754 000004B7 E8E7FBFFFF              			call GetName 			; get name
   755                                  
   756 000004BC B8[1A000000]            			mov eax,SecondName 		; put pointer in eax
   757 000004C1 E83AFBFFFF              			call CopyName 			; copy name from buffer
   758                                  
   759 000004C6 E857FBFFFF              			call NewLine 			;print new line
   760                                  
   761 000004CB E907FFFFFF              			jmp .main 				; go back to modify
   762                                  		.third:
   763 000004D0 803D[0B000000]03        			cmp byte [Match],3 		;match 3rd?
   764 000004D7 755F                    			jne .fourth 			; no, go to 4th
   765                                  
   766 000004D9 E844FBFFFF              			call NewLine 			;print new line
   767                                  
   768                                  			print_out NameWas, NameWasLen ;print prompt for prev name
   769                              <1>  store_registers
   770 000004DE 50                  <2>  push eax
   771 000004DF 53                  <2>  push ebx
   772 000004E0 51                  <2>  push ecx
   773 000004E1 52                  <2>  push edx
   774                              <1> 
   775 000004E2 B804000000          <1>  mov eax,4
   776 000004E7 BB01000000          <1>  mov ebx,1
   777 000004EC B9[32000000]        <1>  mov ecx,%1
   778 000004F1 BA0E000000          <1>  mov edx,%2
   779 000004F6 CD80                <1>  int 80h
   780                              <1> 
   781                              <1>  restore_registers
   782 000004F8 5A                  <2>  pop edx
   783 000004F9 59                  <2>  pop ecx
   784 000004FA 5B                  <2>  pop ebx
   785 000004FB 58                  <2>  pop eax
   786                                  
   787                                  			print_out ThirdName, NameLength ;print name
   788                              <1>  store_registers
   789 000004FC 50                  <2>  push eax
   790 000004FD 53                  <2>  push ebx
   791 000004FE 51                  <2>  push ecx
   792 000004FF 52                  <2>  push edx
   793                              <1> 
   794 00000500 B804000000          <1>  mov eax,4
   795 00000505 BB01000000          <1>  mov ebx,1
   796 0000050A B9[26000000]        <1>  mov ecx,%1
   797 0000050F BA09000000          <1>  mov edx,%2
   798 00000514 CD80                <1>  int 80h
   799                              <1> 
   800                              <1>  restore_registers
   801 00000516 5A                  <2>  pop edx
   802 00000517 59                  <2>  pop ecx
   803 00000518 5B                  <2>  pop ebx
   804 00000519 58                  <2>  pop eax
   805                                  
   806 0000051A E803FBFFFF              			call NewLine 			;print new line
   807                                  
   808 0000051F E87FFBFFFF              			call GetName 			; get name
   809                                  
   810 00000524 B8[26000000]            			mov eax,ThirdName 		; put pointer in eax
   811 00000529 E8D2FAFFFF              			call CopyName 			; copy name from buffer
   812                                  
   813 0000052E E8EFFAFFFF              			call NewLine 			;print new line
   814                                  
   815 00000533 E99FFEFFFF              			jmp .main 				; go back to modify
   816                                  		.fourth:
   817 00000538 803D[0B000000]04        			cmp byte [Match],4 		; match 4th?
   818 0000053F 755F                    			jne .fifth 				; no, go to 5th
   819                                  
   820 00000541 E8DCFAFFFF              			call NewLine 			;print new line
   821                                  
   822                                  			print_out NameWas, NameWasLen ;print prompt for prev name
   823                              <1>  store_registers
   824 00000546 50                  <2>  push eax
   825 00000547 53                  <2>  push ebx
   826 00000548 51                  <2>  push ecx
   827 00000549 52                  <2>  push edx
   828                              <1> 
   829 0000054A B804000000          <1>  mov eax,4
   830 0000054F BB01000000          <1>  mov ebx,1
   831 00000554 B9[32000000]        <1>  mov ecx,%1
   832 00000559 BA0E000000          <1>  mov edx,%2
   833 0000055E CD80                <1>  int 80h
   834                              <1> 
   835                              <1>  restore_registers
   836 00000560 5A                  <2>  pop edx
   837 00000561 59                  <2>  pop ecx
   838 00000562 5B                  <2>  pop ebx
   839 00000563 58                  <2>  pop eax
   840                                  
   841                                  			print_out FourthName, NameLength ;print name
   842                              <1>  store_registers
   843 00000564 50                  <2>  push eax
   844 00000565 53                  <2>  push ebx
   845 00000566 51                  <2>  push ecx
   846 00000567 52                  <2>  push edx
   847                              <1> 
   848 00000568 B804000000          <1>  mov eax,4
   849 0000056D BB01000000          <1>  mov ebx,1
   850 00000572 B9[32000000]        <1>  mov ecx,%1
   851 00000577 BA09000000          <1>  mov edx,%2
   852 0000057C CD80                <1>  int 80h
   853                              <1> 
   854                              <1>  restore_registers
   855 0000057E 5A                  <2>  pop edx
   856 0000057F 59                  <2>  pop ecx
   857 00000580 5B                  <2>  pop ebx
   858 00000581 58                  <2>  pop eax
   859                                  
   860 00000582 E89BFAFFFF              			call NewLine 			;print new line
   861                                  
   862 00000587 E817FBFFFF              			call GetName 			; get name
   863                                  
   864 0000058C B8[32000000]            			mov eax,FourthName 		; put pointer in eax
   865 00000591 E86AFAFFFF              			call CopyName 			; copy name from buffer
   866                                  
   867 00000596 E887FAFFFF              			call NewLine 			;print new line
   868                                  
   869 0000059B E937FEFFFF              			jmp .main 				; go back to modify
   870                                  		.fifth:
   871 000005A0 E87DFAFFFF              			call NewLine 			;print new line
   872                                  
   873                                  			print_out NameWas, NameWasLen ;print prompt for prev name
   874                              <1>  store_registers
   875 000005A5 50                  <2>  push eax
   876 000005A6 53                  <2>  push ebx
   877 000005A7 51                  <2>  push ecx
   878 000005A8 52                  <2>  push edx
   879                              <1> 
   880 000005A9 B804000000          <1>  mov eax,4
   881 000005AE BB01000000          <1>  mov ebx,1
   882 000005B3 B9[32000000]        <1>  mov ecx,%1
   883 000005B8 BA0E000000          <1>  mov edx,%2
   884 000005BD CD80                <1>  int 80h
   885                              <1> 
   886                              <1>  restore_registers
   887 000005BF 5A                  <2>  pop edx
   888 000005C0 59                  <2>  pop ecx
   889 000005C1 5B                  <2>  pop ebx
   890 000005C2 58                  <2>  pop eax
   891                                  
   892                                  			print_out FifthName, NameLength ;print name
   893                              <1>  store_registers
   894 000005C3 50                  <2>  push eax
   895 000005C4 53                  <2>  push ebx
   896 000005C5 51                  <2>  push ecx
   897 000005C6 52                  <2>  push edx
   898                              <1> 
   899 000005C7 B804000000          <1>  mov eax,4
   900 000005CC BB01000000          <1>  mov ebx,1
   901 000005D1 B9[3E000000]        <1>  mov ecx,%1
   902 000005D6 BA09000000          <1>  mov edx,%2
   903 000005DB CD80                <1>  int 80h
   904                              <1> 
   905                              <1>  restore_registers
   906 000005DD 5A                  <2>  pop edx
   907 000005DE 59                  <2>  pop ecx
   908 000005DF 5B                  <2>  pop ebx
   909 000005E0 58                  <2>  pop eax
   910                                  
   911 000005E1 E83CFAFFFF              			call NewLine 			;print new line
   912                                  
   913 000005E6 E8B8FAFFFF              			call GetName 			; get name
   914                                  
   915 000005EB B8[3E000000]            			mov eax,FifthName 		; put pointer in eax
   916 000005F0 E80BFAFFFF              			call CopyName 			; copy name from buffer
   917                                  
   918 000005F5 E828FAFFFF              			call NewLine 			;print new line
   919                                  
   920 000005FA E9D8FDFFFF              			jmp .main 				; go back to modify
   921 000005FF E900000000              		jmp Exit
   922                                  
   923                                  Exit:
   924 00000604 E819FAFFFF              		call NewLine 			;print new line
   925                                  
   926                                  		print_out ID,IDLen 		;print id message
   927                              <1>  store_registers
   928 00000609 50                  <2>  push eax
   929 0000060A 53                  <2>  push ebx
   930 0000060B 51                  <2>  push ecx
   931 0000060C 52                  <2>  push edx
   932                              <1> 
   933 0000060D B804000000          <1>  mov eax,4
   934 00000612 BB01000000          <1>  mov ebx,1
   935 00000617 B9[7E000000]        <1>  mov ecx,%1
   936 0000061C BA04000000          <1>  mov edx,%2
   937 00000621 CD80                <1>  int 80h
   938                              <1> 
   939                              <1>  restore_registers
   940 00000623 5A                  <2>  pop edx
   941 00000624 59                  <2>  pop ecx
   942 00000625 5B                  <2>  pop ebx
   943 00000626 58                  <2>  pop eax
   944                                  		print_out FirstID, DigitLength  ;print id
   945                              <1>  store_registers
   946 00000627 50                  <2>  push eax
   947 00000628 53                  <2>  push ebx
   948 00000629 51                  <2>  push ecx
   949 0000062A 52                  <2>  push edx
   950                              <1> 
   951 0000062B B804000000          <1>  mov eax,4
   952 00000630 BB01000000          <1>  mov ebx,1
   953 00000635 B9[0C000000]        <1>  mov ecx,%1
   954 0000063A BA02000000          <1>  mov edx,%2
   955 0000063F CD80                <1>  int 80h
   956                              <1> 
   957                              <1>  restore_registers
   958 00000641 5A                  <2>  pop edx
   959 00000642 59                  <2>  pop ecx
   960 00000643 5B                  <2>  pop ebx
   961 00000644 58                  <2>  pop eax
   962                                  
   963 00000645 E8D8F9FFFF              		call NewLine 			; print new line
   964                                  
   965                                  		print_out NAME,NAMELen 	;print name message
   966                              <1>  store_registers
   967 0000064A 50                  <2>  push eax
   968 0000064B 53                  <2>  push ebx
   969 0000064C 51                  <2>  push ecx
   970 0000064D 52                  <2>  push edx
   971                              <1> 
   972 0000064E B804000000          <1>  mov eax,4
   973 00000653 BB01000000          <1>  mov ebx,1
   974 00000658 B9[82000000]        <1>  mov ecx,%1
   975 0000065D BA06000000          <1>  mov edx,%2
   976 00000662 CD80                <1>  int 80h
   977                              <1> 
   978                              <1>  restore_registers
   979 00000664 5A                  <2>  pop edx
   980 00000665 59                  <2>  pop ecx
   981 00000666 5B                  <2>  pop ebx
   982 00000667 58                  <2>  pop eax
   983                                  		print_out FirstName, NameLength ;print name
   984                              <1>  store_registers
   985 00000668 50                  <2>  push eax
   986 00000669 53                  <2>  push ebx
   987 0000066A 51                  <2>  push ecx
   988 0000066B 52                  <2>  push edx
   989                              <1> 
   990 0000066C B804000000          <1>  mov eax,4
   991 00000671 BB01000000          <1>  mov ebx,1
   992 00000676 B9[0E000000]        <1>  mov ecx,%1
   993 0000067B BA09000000          <1>  mov edx,%2
   994 00000680 CD80                <1>  int 80h
   995                              <1> 
   996                              <1>  restore_registers
   997 00000682 5A                  <2>  pop edx
   998 00000683 59                  <2>  pop ecx
   999 00000684 5B                  <2>  pop ebx
  1000 00000685 58                  <2>  pop eax
  1001                                  
  1002 00000686 E897F9FFFF              		call NewLine 			; print new line
  1003                                  
  1004                                  		print_out ID,IDLen 		;print id message
  1005                              <1>  store_registers
  1006 0000068B 50                  <2>  push eax
  1007 0000068C 53                  <2>  push ebx
  1008 0000068D 51                  <2>  push ecx
  1009 0000068E 52                  <2>  push edx
  1010                              <1> 
  1011 0000068F B804000000          <1>  mov eax,4
  1012 00000694 BB01000000          <1>  mov ebx,1
  1013 00000699 B9[7E000000]        <1>  mov ecx,%1
  1014 0000069E BA04000000          <1>  mov edx,%2
  1015 000006A3 CD80                <1>  int 80h
  1016                              <1> 
  1017                              <1>  restore_registers
  1018 000006A5 5A                  <2>  pop edx
  1019 000006A6 59                  <2>  pop ecx
  1020 000006A7 5B                  <2>  pop ebx
  1021 000006A8 58                  <2>  pop eax
  1022                                  		print_out SecondID, DigitLength ;print id
  1023                              <1>  store_registers
  1024 000006A9 50                  <2>  push eax
  1025 000006AA 53                  <2>  push ebx
  1026 000006AB 51                  <2>  push ecx
  1027 000006AC 52                  <2>  push edx
  1028                              <1> 
  1029 000006AD B804000000          <1>  mov eax,4
  1030 000006B2 BB01000000          <1>  mov ebx,1
  1031 000006B7 B9[18000000]        <1>  mov ecx,%1
  1032 000006BC BA02000000          <1>  mov edx,%2
  1033 000006C1 CD80                <1>  int 80h
  1034                              <1> 
  1035                              <1>  restore_registers
  1036 000006C3 5A                  <2>  pop edx
  1037 000006C4 59                  <2>  pop ecx
  1038 000006C5 5B                  <2>  pop ebx
  1039 000006C6 58                  <2>  pop eax
  1040                                  
  1041 000006C7 E856F9FFFF              		call NewLine 			; print new line
  1042                                  
  1043                                  		print_out NAME,NAMELen 	;print name message
  1044                              <1>  store_registers
  1045 000006CC 50                  <2>  push eax
  1046 000006CD 53                  <2>  push ebx
  1047 000006CE 51                  <2>  push ecx
  1048 000006CF 52                  <2>  push edx
  1049                              <1> 
  1050 000006D0 B804000000          <1>  mov eax,4
  1051 000006D5 BB01000000          <1>  mov ebx,1
  1052 000006DA B9[82000000]        <1>  mov ecx,%1
  1053 000006DF BA06000000          <1>  mov edx,%2
  1054 000006E4 CD80                <1>  int 80h
  1055                              <1> 
  1056                              <1>  restore_registers
  1057 000006E6 5A                  <2>  pop edx
  1058 000006E7 59                  <2>  pop ecx
  1059 000006E8 5B                  <2>  pop ebx
  1060 000006E9 58                  <2>  pop eax
  1061                                  		print_out SecondName, NameLength ;print name
  1062                              <1>  store_registers
  1063 000006EA 50                  <2>  push eax
  1064 000006EB 53                  <2>  push ebx
  1065 000006EC 51                  <2>  push ecx
  1066 000006ED 52                  <2>  push edx
  1067                              <1> 
  1068 000006EE B804000000          <1>  mov eax,4
  1069 000006F3 BB01000000          <1>  mov ebx,1
  1070 000006F8 B9[1A000000]        <1>  mov ecx,%1
  1071 000006FD BA09000000          <1>  mov edx,%2
  1072 00000702 CD80                <1>  int 80h
  1073                              <1> 
  1074                              <1>  restore_registers
  1075 00000704 5A                  <2>  pop edx
  1076 00000705 59                  <2>  pop ecx
  1077 00000706 5B                  <2>  pop ebx
  1078 00000707 58                  <2>  pop eax
  1079                                  
  1080 00000708 E815F9FFFF              		call NewLine 			; print new line
  1081                                  		
  1082                                  		print_out ID,IDLen 		;print id message
  1083                              <1>  store_registers
  1084 0000070D 50                  <2>  push eax
  1085 0000070E 53                  <2>  push ebx
  1086 0000070F 51                  <2>  push ecx
  1087 00000710 52                  <2>  push edx
  1088                              <1> 
  1089 00000711 B804000000          <1>  mov eax,4
  1090 00000716 BB01000000          <1>  mov ebx,1
  1091 0000071B B9[7E000000]        <1>  mov ecx,%1
  1092 00000720 BA04000000          <1>  mov edx,%2
  1093 00000725 CD80                <1>  int 80h
  1094                              <1> 
  1095                              <1>  restore_registers
  1096 00000727 5A                  <2>  pop edx
  1097 00000728 59                  <2>  pop ecx
  1098 00000729 5B                  <2>  pop ebx
  1099 0000072A 58                  <2>  pop eax
  1100                                  		print_out ThirdID, DigitLength ;print id
  1101                              <1>  store_registers
  1102 0000072B 50                  <2>  push eax
  1103 0000072C 53                  <2>  push ebx
  1104 0000072D 51                  <2>  push ecx
  1105 0000072E 52                  <2>  push edx
  1106                              <1> 
  1107 0000072F B804000000          <1>  mov eax,4
  1108 00000734 BB01000000          <1>  mov ebx,1
  1109 00000739 B9[24000000]        <1>  mov ecx,%1
  1110 0000073E BA02000000          <1>  mov edx,%2
  1111 00000743 CD80                <1>  int 80h
  1112                              <1> 
  1113                              <1>  restore_registers
  1114 00000745 5A                  <2>  pop edx
  1115 00000746 59                  <2>  pop ecx
  1116 00000747 5B                  <2>  pop ebx
  1117 00000748 58                  <2>  pop eax
  1118                                  
  1119 00000749 E8D4F8FFFF              		call NewLine 			; print new line
  1120                                  		
  1121                                  		print_out NAME,NAMELen 	;print name message
  1122                              <1>  store_registers
  1123 0000074E 50                  <2>  push eax
  1124 0000074F 53                  <2>  push ebx
  1125 00000750 51                  <2>  push ecx
  1126 00000751 52                  <2>  push edx
  1127                              <1> 
  1128 00000752 B804000000          <1>  mov eax,4
  1129 00000757 BB01000000          <1>  mov ebx,1
  1130 0000075C B9[82000000]        <1>  mov ecx,%1
  1131 00000761 BA06000000          <1>  mov edx,%2
  1132 00000766 CD80                <1>  int 80h
  1133                              <1> 
  1134                              <1>  restore_registers
  1135 00000768 5A                  <2>  pop edx
  1136 00000769 59                  <2>  pop ecx
  1137 0000076A 5B                  <2>  pop ebx
  1138 0000076B 58                  <2>  pop eax
  1139                                  		print_out ThirdName, NameLength ;print name
  1140                              <1>  store_registers
  1141 0000076C 50                  <2>  push eax
  1142 0000076D 53                  <2>  push ebx
  1143 0000076E 51                  <2>  push ecx
  1144 0000076F 52                  <2>  push edx
  1145                              <1> 
  1146 00000770 B804000000          <1>  mov eax,4
  1147 00000775 BB01000000          <1>  mov ebx,1
  1148 0000077A B9[26000000]        <1>  mov ecx,%1
  1149 0000077F BA09000000          <1>  mov edx,%2
  1150 00000784 CD80                <1>  int 80h
  1151                              <1> 
  1152                              <1>  restore_registers
  1153 00000786 5A                  <2>  pop edx
  1154 00000787 59                  <2>  pop ecx
  1155 00000788 5B                  <2>  pop ebx
  1156 00000789 58                  <2>  pop eax
  1157                                  
  1158 0000078A E893F8FFFF              		call NewLine 			; print new line
  1159                                  		
  1160                                  		print_out ID,IDLen 		;print id message
  1161                              <1>  store_registers
  1162 0000078F 50                  <2>  push eax
  1163 00000790 53                  <2>  push ebx
  1164 00000791 51                  <2>  push ecx
  1165 00000792 52                  <2>  push edx
  1166                              <1> 
  1167 00000793 B804000000          <1>  mov eax,4
  1168 00000798 BB01000000          <1>  mov ebx,1
  1169 0000079D B9[7E000000]        <1>  mov ecx,%1
  1170 000007A2 BA04000000          <1>  mov edx,%2
  1171 000007A7 CD80                <1>  int 80h
  1172                              <1> 
  1173                              <1>  restore_registers
  1174 000007A9 5A                  <2>  pop edx
  1175 000007AA 59                  <2>  pop ecx
  1176 000007AB 5B                  <2>  pop ebx
  1177 000007AC 58                  <2>  pop eax
  1178                                  		print_out FourthID, DigitLength ;print id
  1179                              <1>  store_registers
  1180 000007AD 50                  <2>  push eax
  1181 000007AE 53                  <2>  push ebx
  1182 000007AF 51                  <2>  push ecx
  1183 000007B0 52                  <2>  push edx
  1184                              <1> 
  1185 000007B1 B804000000          <1>  mov eax,4
  1186 000007B6 BB01000000          <1>  mov ebx,1
  1187 000007BB B9[30000000]        <1>  mov ecx,%1
  1188 000007C0 BA02000000          <1>  mov edx,%2
  1189 000007C5 CD80                <1>  int 80h
  1190                              <1> 
  1191                              <1>  restore_registers
  1192 000007C7 5A                  <2>  pop edx
  1193 000007C8 59                  <2>  pop ecx
  1194 000007C9 5B                  <2>  pop ebx
  1195 000007CA 58                  <2>  pop eax
  1196                                  
  1197 000007CB E852F8FFFF              		call NewLine 			; print new line
  1198                                  		
  1199                                  		print_out NAME,NAMELen 	;print name message
  1200                              <1>  store_registers
  1201 000007D0 50                  <2>  push eax
  1202 000007D1 53                  <2>  push ebx
  1203 000007D2 51                  <2>  push ecx
  1204 000007D3 52                  <2>  push edx
  1205                              <1> 
  1206 000007D4 B804000000          <1>  mov eax,4
  1207 000007D9 BB01000000          <1>  mov ebx,1
  1208 000007DE B9[82000000]        <1>  mov ecx,%1
  1209 000007E3 BA06000000          <1>  mov edx,%2
  1210 000007E8 CD80                <1>  int 80h
  1211                              <1> 
  1212                              <1>  restore_registers
  1213 000007EA 5A                  <2>  pop edx
  1214 000007EB 59                  <2>  pop ecx
  1215 000007EC 5B                  <2>  pop ebx
  1216 000007ED 58                  <2>  pop eax
  1217                                  		print_out FourthName, NameLength ;print name
  1218                              <1>  store_registers
  1219 000007EE 50                  <2>  push eax
  1220 000007EF 53                  <2>  push ebx
  1221 000007F0 51                  <2>  push ecx
  1222 000007F1 52                  <2>  push edx
  1223                              <1> 
  1224 000007F2 B804000000          <1>  mov eax,4
  1225 000007F7 BB01000000          <1>  mov ebx,1
  1226 000007FC B9[32000000]        <1>  mov ecx,%1
  1227 00000801 BA09000000          <1>  mov edx,%2
  1228 00000806 CD80                <1>  int 80h
  1229                              <1> 
  1230                              <1>  restore_registers
  1231 00000808 5A                  <2>  pop edx
  1232 00000809 59                  <2>  pop ecx
  1233 0000080A 5B                  <2>  pop ebx
  1234 0000080B 58                  <2>  pop eax
  1235                                  
  1236 0000080C E811F8FFFF              		call NewLine 			; print new line
  1237                                  		
  1238                                  		print_out ID,IDLen 		;print id message
  1239                              <1>  store_registers
  1240 00000811 50                  <2>  push eax
  1241 00000812 53                  <2>  push ebx
  1242 00000813 51                  <2>  push ecx
  1243 00000814 52                  <2>  push edx
  1244                              <1> 
  1245 00000815 B804000000          <1>  mov eax,4
  1246 0000081A BB01000000          <1>  mov ebx,1
  1247 0000081F B9[7E000000]        <1>  mov ecx,%1
  1248 00000824 BA04000000          <1>  mov edx,%2
  1249 00000829 CD80                <1>  int 80h
  1250                              <1> 
  1251                              <1>  restore_registers
  1252 0000082B 5A                  <2>  pop edx
  1253 0000082C 59                  <2>  pop ecx
  1254 0000082D 5B                  <2>  pop ebx
  1255 0000082E 58                  <2>  pop eax
  1256                                  		print_out FifthID, DigitLength ;print id
  1257                              <1>  store_registers
  1258 0000082F 50                  <2>  push eax
  1259 00000830 53                  <2>  push ebx
  1260 00000831 51                  <2>  push ecx
  1261 00000832 52                  <2>  push edx
  1262                              <1> 
  1263 00000833 B804000000          <1>  mov eax,4
  1264 00000838 BB01000000          <1>  mov ebx,1
  1265 0000083D B9[3C000000]        <1>  mov ecx,%1
  1266 00000842 BA02000000          <1>  mov edx,%2
  1267 00000847 CD80                <1>  int 80h
  1268                              <1> 
  1269                              <1>  restore_registers
  1270 00000849 5A                  <2>  pop edx
  1271 0000084A 59                  <2>  pop ecx
  1272 0000084B 5B                  <2>  pop ebx
  1273 0000084C 58                  <2>  pop eax
  1274                                  
  1275 0000084D E8D0F7FFFF              		call NewLine 			; print new line
  1276                                  		
  1277                                  		print_out NAME,NAMELen 	;print name message
  1278                              <1>  store_registers
  1279 00000852 50                  <2>  push eax
  1280 00000853 53                  <2>  push ebx
  1281 00000854 51                  <2>  push ecx
  1282 00000855 52                  <2>  push edx
  1283                              <1> 
  1284 00000856 B804000000          <1>  mov eax,4
  1285 0000085B BB01000000          <1>  mov ebx,1
  1286 00000860 B9[82000000]        <1>  mov ecx,%1
  1287 00000865 BA06000000          <1>  mov edx,%2
  1288 0000086A CD80                <1>  int 80h
  1289                              <1> 
  1290                              <1>  restore_registers
  1291 0000086C 5A                  <2>  pop edx
  1292 0000086D 59                  <2>  pop ecx
  1293 0000086E 5B                  <2>  pop ebx
  1294 0000086F 58                  <2>  pop eax
  1295                                  		print_out FifthName, NameLength ;print name
  1296                              <1>  store_registers
  1297 00000870 50                  <2>  push eax
  1298 00000871 53                  <2>  push ebx
  1299 00000872 51                  <2>  push ecx
  1300 00000873 52                  <2>  push edx
  1301                              <1> 
  1302 00000874 B804000000          <1>  mov eax,4
  1303 00000879 BB01000000          <1>  mov ebx,1
  1304 0000087E B9[3E000000]        <1>  mov ecx,%1
  1305 00000883 BA09000000          <1>  mov edx,%2
  1306 00000888 CD80                <1>  int 80h
  1307                              <1> 
  1308                              <1>  restore_registers
  1309 0000088A 5A                  <2>  pop edx
  1310 0000088B 59                  <2>  pop ecx
  1311 0000088C 5B                  <2>  pop ebx
  1312 0000088D 58                  <2>  pop eax
  1313                                  
  1314 0000088E E88FF7FFFF              		call NewLine 			; print new line
  1315 00000893 B801000000              		mov eax, 1              ; sys_exit syscall
  1316 00000898 BB00000000                      mov ebx, 0              ; no error
  1317 0000089D CD80                            int 80H                 ; kernel interrupt
